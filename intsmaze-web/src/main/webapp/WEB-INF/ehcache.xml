<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd" updateCheck="false">
	<!-- Cache configuration. The following attributes are required. name: Sets 
		the name of the cache. This is used to identify the cache. It must be unique. 
		maxElementsInMemory: Sets the maximum number of objects that will be created 
		in memory (0 == no limit) maxElementsOnDisk: Sets the maximum number of objects 
		that will be maintained in the DiskStore The default value is zero, meaning 
		unlimited. eternal: Sets whether elements are eternal. If eternal, timeouts 
		are ignored and the element is never expired. overflowToDisk: Sets whether 
		elements can overflow to disk when the in-memory cache has reached the maxInMemory 
		limit. The following attributes are optional. timeToIdleSeconds: Sets the 
		time to idle for an element before it expires. i.e. The maximum amount of 
		time between accesses before an element expires Is only used if the element 
		is not eternal. Optional attribute. A value of 0 means that an Element can 
		idle for infinity. The default value is 0. timeToLiveSeconds: Sets the time 
		to live for an element before it expires. i.e. The maximum time between creation 
		time and when an element expires. Is only used if the element is not eternal. 
		Optional attribute. A value of 0 means that and Element can live for infinity. 
		The default value is 0. diskPersistent: Whether the disk store persists between 
		restarts of the Virtual Machine. The default value is false. diskExpiryThreadIntervalSeconds: 
		The number of seconds between runs of the disk expiry thread. The default 
		value is 120 seconds. diskSpoolBufferSizeMB: This is the size to allocate 
		the DiskStore for a spool buffer. Writes are made to this area and then asynchronously 
		written to disk. The default size is 30MB. Each spool buffer is used only 
		by its cache. If you get OutOfMemory errors consider lowering this value. 
		To improve DiskStore performance consider increasing it. Trace level logging 
		in the DiskStore will show if put back ups are occurring. memoryStoreEvictionPolicy: 
		Policy would be enforced upon reaching the maxElementsInMemory limit. Default 
		policy is Least Recently Used (specified as LRU). Other policies available 
		- First In First Out (specified as FIFO) and Less Frequently Used (specified 
		as LFU) Cache elements can also contain sub elements which take the same 
		format of a factory class and properties. Defined sub-elements are: * cacheEventListenerFactory 
		- Enables registration of listeners for cache events, such as put, remove, 
		update, and expire. * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, 
		which is called by a cache on initialisation to prepopulate itself. Each 
		cache that will be distributed needs to set a cache event listener which 
		replicates messages to the other CacheManager peers. For the built-in RMI 
		implementation this is done by adding a cacheEventListenerFactory element 
		of type RMICacheReplicatorFactory to each distributed cache's configuration 
		as per the following example: <cacheEventListenerFactory class="net.sf.ehcache.distribution.RMICacheReplicatorFactory" 
		properties="replicateAsynchronously=true, replicatePuts=true, replicateUpdates=true, 
		replicateUpdatesViaCopy=true, replicateRemovals=true "/> The RMICacheReplicatorFactory 
		recognises the following properties: * replicatePuts=true|false - whether 
		new elements placed in a cache are replicated to others. Defaults to true. 
		* replicateUpdates=true|false - whether new elements which override an element 
		already existing with the same key are replicated. Defaults to true. * replicateRemovals=true 
		- whether element removals are replicated. Defaults to true. * replicateAsynchronously=true 
		| false - whether replications are asynchronous (true) or synchronous (false). 
		Defaults to true. * replicateUpdatesViaCopy=true | false - whether the new 
		elements are copied to other caches (true), or whether a remove message is 
		sent. Defaults to true. * asynchronousReplicationIntervalMillis=<number of 
		milliseconds> - The asynchronous replicator runs at a set interval of milliseconds. 
		The default is 1000. The minimum is 10. This property is only applicable 
		if replicateAsynchronously=true * asynchronousReplicationMaximumBatchSize=<number 
		of operations> - The maximum number of operations that will be batch within 
		a single RMI message. The default is 1000. This property is only applicable 
		if replicateAsynchronously=true The RMIBootstrapCacheLoader bootstraps caches 
		in clusters where RMICacheReplicators are used. It is configured as per the 
		following example: <bootstrapCacheLoaderFactory class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory" 
		properties="bootstrapAsynchronously=true, maximumChunkSizeBytes=5000000"/> 
		The RMIBootstrapCacheLoaderFactory recognises the following optional properties: 
		* bootstrapAsynchronously=true|false - whether the bootstrap happens in the 
		background after the cache has started. If false, bootstrapping must complete 
		before the cache is made available. The default value is true. * maximumChunkSizeBytes=<integer> 
		- Caches can potentially be very large, larger than the memory limits of 
		the VM. This property allows the bootstraper to fetched elements in chunks. 
		The default chunk size is 5000000 (5MB). -->

	<!--磁盘存储配置：用来指定缓存在磁盘上的存储位置。可以使用JavaVM环境变量(user.home, user.dir, java.io.tmpdir) -->
	<diskStore path="java.io.tmpdir" />

	<!--指定CacheManagerEventListenerFactory，这个对象在缓存添加的时候会得到相应的通知。 CacheManagerEventListenerFactory的属性： 
		*class ：CacheManagerEventListenerFactory的一个实现类。 *properties ：CacheManagerEventListenerFactory的属性值，以逗号(,)分割多个属性。如果没有实现类被指定，则系统不创建CacheManager的监听器，没有默认值 
	<cacheManagerEventListenerFactory
		class="" properties="" />-->

	<!--在进行分布式缓存的应用时需要指定CacheManagerPeerProviderFactory，用来生成CacheManagerPeerProvider的实例，以便和集群中的其他CacheManager通信。 
		CacheManagerPeerProvider的属性： *class ：CacheManagerPeerProviderFactory的一个实现类。 
		*properties ：CacheManagerPeerProviderFactory的属性值，以逗号(,)分割多个属性。 Ehcache内建了2种基于RMI分布系统的通信策略： 
		*automatic ：使用多播组。在一个节点加入或者推出集群的时候自动感应。 *manual ：硬编码方式 
	<cacheManagerPeerListenerFactory class=""
		properties="" />-->

	<!-- Mandatory Default Cache configuration. These settings will be applied 
		to caches created programmtically using CacheManager.add(String cacheName) -->
	<defaultCache maxElementsInMemory="10000" eternal="false"
		timeToIdleSeconds="120" timeToLiveSeconds="120" maxElementsOnDisk="10000000"
		diskExpiryThreadIntervalSeconds="120" memoryStoreEvictionPolicy="LRU">
		<!-- <persistence strategy="localTempSwap" /> -->
	</defaultCache>

	<!--           
	    配置自定义缓存          
	    maxElementsInMemory：缓存中允许创建的最大对象数          
	    eternal：缓存中对象是否为永久的，如果是，超时设置将被忽略，对象从不过期。          
	    timeToIdleSeconds：缓存数据的钝化时间，也就是在一个元素消亡之前，                      
	                    两次访问时间的最大时间间隔值，这只能在元素不是永久驻留时有效，                      
	                    如果该值是 0 就意味着元素可以停顿无穷长的时间。          
	    timeToLiveSeconds：缓存数据的生存时间，也就是一个元素从构建到消亡的最大时间间隔值，                                      这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。          
	    overflowToDisk：内存不足时，是否启用磁盘缓存。          
	    memoryStoreEvictionPolicy：缓存满了之后的淘汰算法。      
    -->  
	<!-- maxElementsOnDisk="3000" 先不加，纯内存缓存 -->
	<cache name="FDFB.application.cache" 
		maxElementsInMemory="2000" 
		eternal="true" 
		memoryStoreEvictionPolicy="LRU" >
		<cacheEventListenerFactory class="org.FDFBbusiness.springmvc.cache.FDFBCacheListenerFactory"/>
	</cache>

</ehcache>